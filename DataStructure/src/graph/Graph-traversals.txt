Graph traversal algorithms are also called graph search algorithms.

DFS(Depth First Search):-
------------------------
In the beginning all the nodes are unvisited. When a node is visited it becomes
a grey node. isVisited is a boolean variable which keeps track of every node.
Stack data structure is used for DFS. In a DFS, we start from a given node 'u'.
Then we traverse  depth of u until we find a 'dead-end'. Dead-end means when there
is no further adjacent node to proceed. At the dead-end, we backtrack to the previous
node, and proceed for its next adjacent node. We continue this operation till the
backtracking takes back to the starting node.
Sometimes an edge leads to an already discovered node, this edge is called a back edge.
When back edges are removed, we get tree edges.
Applications of DFS:-
    - Topological sorting
    - Finding connected components
    - Finding articulation points(cut vertices) of the graph.
    - Finding strongly connected components.
    - Solving puzzles such as maze.

BFS(Breadth First Search):-
---------------------------
Queue data structure is used for BFS purpose. In this approach of graph traversal, we
cover all the nodes at one given level, then we move to another level. It is similar
to level order traversal of trees. the visited nodes are kept in the queue. While processing
a node, we dequeue the node from queue. This process is continued until queue is empty.
Applications of BFS:-
    - Finding all connected components in a graph.
    - Finding all nodes within one connected component.
    - Finding the shortest path between two nodes.
    - Testing a graph for bipartite.

Topological sort:-
-------------------
You are given a directed graph with n vertices and m edges. You have to number the vertices
so that every edge leads from the vertex with a smaller number assigned to the vertex with a larger one.
In other words, you want to find a permutation of the vertices (topological order) which corresponds
to the order defined by all edges of the graph.
Topological order can be non-unique (for example, if the graph is empty; or if there exist three
vertices a , b, c for which there exist paths from a to b and from a to c but not paths from b to c or
from c to b).
Topological order may not exist at all if the graph contains cycles (because there is a contradiction:
there is a path from a to b and vice versa).
A common problem in which topological sorting occurs is the following. There are n
variables with unknown values. For some variables we know that one of them is less
than the other. You have to check whether these constraints are contradictory, and
if not, output the variables in ascending order (if several answers are possible,
output any of them). It is easy to notice that this is exactly the problem of finding
topological order of a graph with n vertices.